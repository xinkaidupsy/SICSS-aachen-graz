plot(d,thetaMean,ylab="Posterior Mean of Theta (Model 4)",xlab="Observed Effects")
abline(0,1)
model1Code <- "
data {
int<lower=1> n;
int<lower=1> I;
int<lower=0,upper=I> sub[n];
int<lower=0,upper=2> cond[n];
vector[n] y;
}
parameters {
matrix[I,2] mu;
real<lower=0> sigma2;
}
transformed parameters {
real<lower=0> sigma;
vector[I] theta;
vector[n] center;
sigma=sqrt(sigma2);
for (i in 1:I){
theta[i]=mu[i,2]-mu[i,1];}
for (k in 1:n){
center[k]=mu[sub[k],cond[k]];}
}
model {
to_vector(mu) ~ normal(.5,.5);
sigma2 ~ inv_gamma(1,.05);
y ~ normal(center,sigma);
}"
model1 <- stan_model(model_code = model1Code)
dat <- list(
n=length(rt),
I=max(sub),
sub=sub,
cond=cond,
y=rt)
samples <- sampling(model1,
data=dat,
iter=600,
chains=1,
warmup=200)
I=max(sub)
theta=rstan::extract(samples)$theta
thetaMean=apply(theta,2,mean)
thetaLo=apply(theta,2,quantile,p=.05)
thetaHi=apply(theta,2,quantile,p=.95)
o=order(thetaMean)
range=c(min(thetaLo),max(thetaHi))
plot(1:I,thetaMean[o],typ='l',ylim=range,
ylab="Flanker Effect (sec)",
xlab="Participants")
lines(1:I,thetaHi[o],lty=2)
lines(1:I,thetaLo[o],lty=2)
plot(d,thetaMean,ylab="Posterior Mean of Theta (Model 2)",xlab="Observed Effects")
abline(0,1)
model2Code <- "
data {
int<lower=1> n;
int<lower=1> I;
int<lower=0,upper=I> sub[n];
int<lower=0,upper=2> cond[n];
vector[n] y;
}
parameters {
matrix[I,2] mu;
real<lower=0> sigma2;
real<lower=0> delta2;
real eta;
}
transformed parameters {
real<lower=0> sigma;
real<lower=0> delta;
vector[I] theta;
vector[n] center;
sigma=sqrt(sigma2);
delta=sqrt(delta2);
for (i in 1:I){
theta[i]=mu[i,2]-mu[i,1];}
for (k in 1:n){
center[k]=mu[sub[k],cond[k]];}
}
model {
sigma2 ~ inv_gamma(1,.05);
delta2 ~ inv_gamma(1,.05);
eta ~ normal(.5,.5);
to_vector(mu) ~ normal(eta, delta);
y ~ normal(center, sigma);
}"
model2 <- stan_model(model_code = model2Code)
dat <- list(
n=length(rt),
I=max(sub),
sub=sub,
cond=cond,
y=rt)
samples <- sampling(model2,
data=dat,
iter=600,
chains=1,
warmup=200)
I=max(sub)
theta=rstan::extract(samples)$theta
thetaMean=apply(theta,2,mean)
thetaLo=apply(theta,2,quantile,p=.05)
thetaHi=apply(theta,2,quantile,p=.95)
o=order(thetaMean)
range=c(min(thetaLo),max(thetaHi))
plot(1:I,thetaMean[o],typ='l',ylim=range,
ylab="Flanker Effect (sec)",
xlab="Participants")
lines(1:I,thetaHi[o],lty=2)
lines(1:I,thetaLo[o],lty=2)
plot(d,thetaMean,ylab="Posterior Mean of Theta (Model 2)",xlab="Observed Effects")
abline(0,1)
model4Code <- "
data {
int<lower=1> n;
int<lower=1> I;
int<lower=0,upper=I> sub[n];
int<lower=0,upper=2> cond[n];
vector[n] y;
}
transformed data {
vector[n] xj;
for(i in 1:n) {
xj[i] = cond[i] - 1.5;
}
}
parameters {
real<lower=0> sigma2;
vector[I] alpha;
vector[I] theta;
real eta;
real<lower=0> delta2;
}
transformed parameters {
vector[n] center;
real<lower=0> sigma;
real<lower=0> delta;
sigma=sqrt(sigma2);
delta=sqrt(delta2);
for(k in 1:n){
center[k]=alpha[sub[k]]+xj[k]*theta[sub[k]];
}
}
model {
to_vector(alpha) ~ normal(.5,.5);
sigma2 ~ inv_gamma(1,.05);
delta2 ~ inv_gamma(1,.002);
eta ~ normal(0,.1^2);
to_vector(theta) ~ normal(eta,delta);
y ~ normal(center,sigma);
}"
model4 <- stan_model(model_code = model4Code)
dat <- list(
n=length(rt),
I=max(sub),
sub=sub,
cond=cond,
y=rt)
samples <- sampling(model4,
data=dat,
iter=600,
chains=1,
warmup=200)
I=max(sub)
theta=rstan::extract(samples)$theta
thetaMean=apply(theta,2,mean)
thetaLo=apply(theta,2,quantile,p=.05)
thetaHi=apply(theta,2,quantile,p=.95)
o=order(thetaMean)
range=c(min(thetaLo),max(thetaHi))
plot(1:I,thetaMean[o],typ='l',ylim=range,
ylab="Flanker Effect (sec)",
xlab="Participants")
lines(1:I,thetaHi[o],lty=2)
lines(1:I,thetaLo[o],lty=2)
plot(d,thetaMean,ylab="Posterior Mean of Theta (Model 4)",xlab="Observed Effects")
abline(0,1)
plot(d,thetaMean,ylab="Posterior Mean of Theta (Model 4)",xlab="Observed Effects")
abline(0,1)
library(mgm) # 1.2-5
library(qgraph)
figDir <- "figures/"
fit_mvar <- mvar(data = mvar_data$data,
type = c("c", "c", "c", "c", "g", "g"),
level = c(2, 2, 4, 4, 1, 1),
lambdaSel = "EBIC",
lambdaGam = .25,
lags = 1)
round(fit_mvar$wadj[, , 1], 2)
pred_mgm <- predict(object = fit_mvar,
data = mvar_data$data,
errorCon = c("RMSE", "R2"),
errorCat = c("CC", "nCC"))
pred_mgm$errors
errors <- c(pred_mgm$errors[1:4, 5], pred_mgm$errors[5:6, 3])
pdf(paste0(figDir, "Fig_mvar_p6_example.pdf"), width = 7, height = 4)
paste0(figDir, "Fig_mvar_p6_example.pdf")
set.seed(1)
qgraph(t(fit_mvar$wadj[,,1]),
edge.color = t(fit_mvar$edgecolor[,,1]),
pie = errors,
pieColor = c(rep("tomato", 4), rep("lightblue", 2)),
nodeNames = c(paste0("Categorical; m = ", c(2,2,4,4)), rep("Gaussian", 2)))
matrix(0.6861755357240092, 0.23606639527943876,0.0, 0.6024003525110556, 0.4669807996914592, 0.4352693700445224)
matrix(c(0.6861755357240092,
0.23606639527943876,
0,
0.6024003525110556,
0.4669807996914592,
0.4352693700445224))
m = matrix(c(0.6861755357240092,
0.23606639527943876,
0,
0.6024003525110556,
0.4669807996914592,
0.4352693700445224))
colnames(m)
rownames(m) = c('raw', 'var', 'ac',
'raw+var', 'raw+ac',
'raw+ews')
colnames(m) = "Accuracy"
m
round(m, 2)
rownames(m) = c('rawVariables', 'variance', 'autocorrelation', 'raw+var', 'raw+ac', 'raw+ews')
colnames(m) = "Accuracy"
round(m, 2)
rownames(m) = c('raw\nVariables', 'variance', 'autocorrelation', 'raw+var', 'raw+ac', 'raw+ews')
colnames(m) = "Accuracy"
round(m, 2)
rownames(m) = c('raw \n Variables', 'variance', 'autocorrelation', 'raw+var', 'raw+ac', 'raw+ews')
colnames(m) = "Accuracy"
round(m, 2)
rownames(m) = c('rawVariables', 'Variance', 'AutoCorrelation', 'raw+var', 'raw+ac', 'raw+ews')
colnames(m) = "Accuracy"
round(m, 2)
rownames(m) = c('rawVariables(Raw)', 'Variance (Var)', 'AutoCorrelation (AC)', 'Raw+Var', 'Raw+AC', 'Raw+Var+AC')
colnames(m) = "Accuracy"
round(m, 2)
tibble::as.tibble(m)
tibble::as_tibble(m)
round(m, 2)
m2 = matrix(c(0.6089261730290142,
0.14016728633685158,
0,
0.45739138509700233,
0.0441202333897986,
0.08470711671581238))
rownames(m2) = c('pca', 'pcaVar', 'pcaAC)', 'pca+pcaVar', 'pca+pcaAC', 'pca+pcaVar+pcaAC')
colnames(m2) = "Accuracy"
round(m2, 2)
rownames(m2) = c('pca', 'pcaVar', 'pcaAC', 'pca+pcaVar', 'pca+pcaAC', 'pca+pcaVar+pcaAC')
colnames(m2) = "Accuracy"
round(m2, 2)
input <- if (file.exists("flights14.csv")) {
"flights14.csv"
} else {
"https://raw.githubusercontent.com/Rdatatable/data.table/master/vignettes/flights14.csv"
}
flights <- fread(input)
library(data.table)
flights <- fread(input)
flights
dim(flights)
DT = data.table(
ID = c("b","b","b","a","a","c"),
a = 1:6,
b = 7:12,
c = 13:18
)
DT
class(DT$ID)
# preview more rows
getOption("datatable.print.nrows")
df <- cbind(sample(c(1:100), 50), sample(c(1:100), 50))
cbind(sample(c(1:100), 50), sample(c(1:100), 50))
df = cbind(sample(c(1:100), 50), sample(c(1:100), 50))
dong <- function(x,y){
return(c(x,y))
}
dong(78,73)
?mapply
apply(df, 1, dong)
?apply
apply(df, 2, dong)
apply(df, 1, mean)
dong <- function(x){
return(x)
}
dong(c(78,83))
apply(df, 1, dong)
df$new = apply(df, 1, dong)
as.data.frame(df)
View(df)
df = cbind(sample(c(1:100), 50), sample(c(1:100), 50))
dong <- function(x){
return(x)
}
apply(df, 1, dong)
df$new = apply(df, 1, dong)
dong <- function(x,y){
return(c(x,y))
}
df$new = apply(df, 1, dong)
apply(df, 1, dong)
df = cbind(sample(c(1:100), 50), sample(c(1:100), 50))
dong <- function(x,y){
return(c(x,y))
}
dong(c(78,83))
dong(78,83)
apply(df, 1, dong)
mapply(df, 1, dong)
df
mapply(dong, df[,1], df[,2])
df$new = mapply(dong, df[,1], df[,2])
df
df$new
df
View(df)
unlist(df)
dim(unlist(df))
dong <- function(x,y){
return(c(x))
}
df = cbind(sample(c(1:100), 50), sample(c(1:100), 50))
dong <- function(x,y){
return(c(x))
}
dong(c(78,83))
df$new = apply(df, 1, dong)
df$new
df
df
df$new
unlist(df)
unlist(df$new)
apply(df$new, 1, unlist)
df$new = apply(df$new, 1, unlist)
df
apply(df$new, 1, unlist)
load("/Users/xinkaidu/Google Drive/UvA/Learning/Project/Denny/Thesis followup/Data/XD_JD_Thesis.RData")
pacman::p_load("academicTwitteR")
install.packages("academicTwitteR")
install.packages("updateR")
install.packages("updater")
install.packages("updater")
install.packages("updater")
install.packages("updater")
library(devtools)
install_github('andreacirilloac/updateR')
library(updateR)
updateR(admin_password = '101648')
updateR()
2
2. Copy all packages
install.packages("academicTwitteR")
devtools::install_github("cjbarrie/academictwitteR", build_vignettes = TRUE)
library(academictwitteR)
updateR()
?updateR()
library(qgraph)
install.packages("pacman")
pacman::p_install('qgraph', 'academicTwitterR', 'tidyverse', 'data.table')
pacman::p_install(c('qgraph', 'academicTwitterR', 'tidyverse', 'data.table'))
pacman::p_install(qgraph, academicTwitterR, tidyverse, data.table)
pacman::p_install(qgraph, tidyverse, data.table)
install.packages(c('qgraph', 'tidyverse', 'psychonetrics', 'mgm', 'data.table'))
install.packages(c('BGGM', 'updateR', 'igraph', 'academicTwitteR'))
install.packages('ggplot')
install.packages('ggplot2')
library(academicTwitteR)
library(academictwitteR)
install.packages('academictwitteR')
library('academictwitteR')
AAAAAAAAAAAAAAAAAAAAAHCpewEAAAAAp0ENemYtS4sb4uUoKufBXd4zoo0
AAAAAAAAAAAAAAAAAAAAAHCpewEAAAAAp0ENemYtS4sb4uUoKufBXd4zoo0%3DOFrhxhAmsi15Gq7WHFUg3e0Dlcd9yyVBKmH7Zg98keVfupTjJm
bearer_token
bearer_token = 'AAAAAAAAAAAAAAAAAAAAAHCpewEAAAAAp0ENemYtS4sb4uUoKufBXd4zoo0%3DOFrhxhAmsi15Gq7WHFUg3e0Dlcd9yyVBKmH7Zg98keVfupTjJm'
bearer_token
tweets <-
get_all_tweets("from:twitterdev",
"2021-01-01T00:00:00Z",
"2021-05-31T00:00:00Z",
bearer_token)
View(tweets$text)
View(tweets)
?get_all_tweets
keywords = c('coronavirus', 'covid 19', 'covid-19', 'covid19', 'corona virus',
'#CCPVirus', '#ChinaDidThis', '#ChinaLiedPeopleDied', '#ChinaVirus',
'#ChineseVirus', 'chinese virus', '#ChineseBioterrorism', '#FuckChina',
'#KungFlu', '#MakeChinaPay', '#wuhanflu', '#wuhanvirus', 'wuhan virus', 'chink',
'chinky', 'chonky', 'churka', 'cina', 'cokin', 'communistvirus', 'coolie',
'dink', 'niakouÃ©', 'pastel de flango', 'slant', 'slant eye', 'slopehead', 'ting tong', 'yokel')
tweets <-
get_all_tweets(keywords,
"2021-01-01T00:00:00Z",
"2021-05-31T00:00:00Z",
bearer_token)
setwd("~/Google Drive/UvA/Learning/Statistics/CSS/Aachen-Graz/SICSS-aachen-graz/Project")
tweets <-
get_all_tweets(keywords,
"2021-01-01T00:00:00Z",
"2021-05-31T00:00:00Z",
bearer_token,
data_path = 'data/')
tweets <-
get_all_tweets(keywords,
"2021-01-01T00:00:00Z",
"2021-05-31T00:00:00Z",
bearer_token,
data_path = 'data/',
bind_tweets = F)
View(tweets$text)
pacman::p_load('jsonlite')
getwd()
?fromJSON
fromJSON('~\data\data_1399153430011301888.json')
fromJSON('\data\data_1399153430011301888.json')
fromJSON('~/data/data_1399153430011301888.json')
fromJSON('/data/data_1399153430011301888.json')
fromJSON('~/data/data_1399153430011301888.json')
?get_all_tweets
?get_lang_tweets
tweets <-
get_lang_tweets(keywords,
lang = 'en'
"2021-01-01T00:00:00Z",
tweets <-
get_lang_tweets(keywords,
lang = 'en',
"2021-01-01T00:00:00Z",
"2021-12-31T00:00:00Z",
bearer_token,
data_path = 'data/',
bind_tweets = F)
tweets <-
get_all_tweets(keywords,
lang = 'en',
"2021-01-01T00:00:00Z",
"2021-12-31T00:00:00Z",
bearer_token,
data_path = 'data/',
bind_tweets = F)
tweets <-
get_all_tweets(keywords,
lang = 'en',
"2021-01-01T00:00:00Z",
"2021-12-31T00:00:00Z",
bearer_token,
data_path = 'data/',
bind_tweets = F)
tweets <-
get_all_tweets(keywords,
lang = 'en',
"2021-01-01T00:00:00Z",
"2021-12-31T00:00:00Z",
bearer_token,
data_path = 'data/',
bind_tweets = F,
n = Inf)
tweets <-
get_all_tweets(keywords,
lang = 'en',
"2021-01-01T00:00:00Z",
"2021-12-31T00:00:00Z",
bearer_token,
data_path = 'data/',
bind_tweets = F,
n = 1e5)
install.packages("twitteR")
library("twitteR")
?searchTwitteR
keywords = c('coronavirus+covid 19+covid-19+covid19+corona virus',
'#CCPVirus+#ChinaDidThis+#ChinaLiedPeopleDied+#ChinaVirus',
'#ChineseVirus+chinese virus+#ChineseBioterrorism+#FuckChina',
'#KungFlu+#MakeChinaPay+#wuhanflu+#wuhanvirus+wuhan virus+chink',
'chinky+chonky+churka+cina+cokin+communistvirus+coolie',
'dink+niakouÃ©+pastel de flango+slant+slant eye+slopehead+ting tong+yokel -filter:retweets')
tweets <-
searchTwitteR(keywords,
lang = 'en',
"2021-01-01T00:00:00Z",
"2021-12-31T00:00:00Z",
n = 1e5)
tweets <-
get_all_tweets(keywords,
lang = 'en',
"2021-01-01T00:00:00Z",
"2021-12-31T00:00:00Z",
bearer_token,
data_path = 'data/',
bind_tweets = F,
n = 1e5,
is_retweet = F)
keywords = c('coronavirus', 'covid 19', 'covid-19', 'covid19', 'corona virus',
'#CCPVirus', '#ChinaDidThis', '#ChinaLiedPeopleDied', '#ChinaVirus',
'#ChineseVirus', 'chinese virus', '#ChineseBioterrorism', '#FuckChina',
'#KungFlu', '#MakeChinaPay', '#wuhanflu', '#wuhanvirus', 'wuhan virus', 'chink',
'chinky', 'chonky', 'churka', 'cina', 'cokin', 'communistvirus', 'coolie',
'dink', 'niakouÃ©', 'pastel de flango', 'slant', 'slant eye', 'slopehead', 'ting tong', 'yokel')
tweets <-
get_all_tweets(keywords,
lang = 'en',
"2021-01-01T00:00:00Z",
"2021-12-31T00:00:00Z",
bearer_token,
data_path = 'data/',
bind_tweets = F,
n = 1e5,
is_retweet = F)
